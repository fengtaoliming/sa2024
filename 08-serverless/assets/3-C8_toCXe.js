import{o as r,c as a,k as t,a6 as n,q as i,s as _,A as e,e as s}from"./modules/vue-uEYNCD1x.js";import{I as c}from"./slidev/two-cols-EVC56B1i.js";import{_ as l,a8 as o}from"./index-CIyRdoXZ.js";import{p,u as m,f as d}from"./slidev/context-vkhxtxO6.js";import"./modules/shiki-BzAJ3tB6.js";const u="/sa2024/08-serverless/assets/08-jpetstore-architecture-HG4fFQqC.png",f="/sa2024/08-serverless/assets/08-jpetstore-Bnw8dRej.png",h=s("h1",null,"JPetStore",-1),g=s("br",null,null,-1),x=s("img",{src:u,class:"m-10 h-30"},null,-1),v=s("div",{style:{"text-align":"right","font-size":"24px"}},"mybatis/jpetstore-6",-1),j=s("p",null,[s("br"),s("br"),s("img",{src:f,class:"m-10 h-60"})],-1),P={__name:"3",setup(b){return p(o),m(),(B,k)=>(r(),a(c,i(_(e(d)(e(o),2))),{right:t(y=>[j]),default:t(()=>[h,g,n(" 传统上，架构里会包含一个部署了应用程序和前端的单体服务器。上述架构采用的是瘦客户端方式，所有的业务逻辑（如认证、会话管理、宠物管理等）都部署在服务器端。哪怕你将这个单体服务拆开成若干个微服务，也并没有改变这一点。 "),x,v]),_:1},16))}},I=l(P,[["__file","/@slidev/slides/3.md"]]);export{I as default};
